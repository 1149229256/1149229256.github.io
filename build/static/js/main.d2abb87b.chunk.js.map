{"version":3,"sources":["component/imageShow/index.js","App.js","reportWebVitals.js","index.js"],"names":["timeout","ImageShow","useState","trackCount","trackList","setTrackList","setPrevVisible","setNextVisible","useEffect","arr","i","push","className","$","length","checkBtn","currentLeft","count","nextVisible","showWidth","parseInt","width","actureWidth","Math","abs","changeAwardLeft","type","clearTimeout","setTimeout","node","css","left","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kJAMIA,E,8EAsGWC,MApGf,WACI,MAAoCC,mBAAS,GAA7C,mBAAOC,EAAP,KACA,GADA,KACkCD,mBAAS,KAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KACA,EAAsCH,oBAAS,GAA/C,mBAAoBI,GAApB,WACA,EAAsCJ,oBAAS,GAA/C,mBAAoBK,GAApB,WACAC,qBAAU,WAEN,IADA,IAAIC,EAAM,GACFC,EAAI,EAAGA,EAAIP,EAAYO,IAC3BD,EAAIE,KACA,qBAAKC,UAAW,0BAA4BF,EAAE,MAKtDL,EAAaI,KACd,CAACN,IAEJK,qBAAU,WACHK,IAAE,yBAAyBC,OAAS,GACnCC,EAAS,KAEd,CAACX,IACJ,IAAMW,EAAW,SAACC,GACd,IAE0CC,EAFjBC,GAAc,EACnCC,EAAYC,SAASP,IAAE,yBAAyBQ,SAAW,IAC3DC,EAAiC,IAAnBlB,EAAUU,OAC5BG,EAAQb,EAAUU,OAEdI,EADDI,EAAcH,EAMbD,EADDK,KAAKC,IAAIR,KAAiBC,EAAM,GAAGE,EAWtCb,EANkB,GAAfU,GAOHT,EAAeW,IAEbO,EAAkB,SAACC,GACrBC,aAAa3B,GACbA,EAAU4B,YAAW,WACjB,IAAIC,EAAOhB,IAAE,mBACTM,EAAY,IACZF,EAAQb,EAAUU,OAElBE,EAAcI,SAASS,EAAKC,IAAI,SAEpC,GAAW,QAARJ,EAAe,CACd,GAAkB,GAAfV,EACC,OAEJa,EAAKC,IAAI,CACLC,KAAMf,EAAcG,IAExBJ,EAASC,EAAcG,GAE3B,GAAW,QAARO,EAAe,CACd,GAAGH,KAAKC,IAAIR,KAAiBC,EAAM,GAAGE,EAClC,OAEJU,EAAKC,IAAI,CACLC,KAAMf,EAAcG,IAExBJ,EAASC,EAAcG,MAG5B,MAEP,OACI,sBAAKP,UAAU,aAAf,UACI,qBAAKA,UAAU,uBAAf,SACI,qBAAKA,UAAU,iBAAf,SACCR,MAKD,qBAAKQ,UAAU,WAAWoB,QAAS,kBAAIP,EAAgB,WAMvD,qBAAKb,UAAU,WAAWoB,QAAS,kBAAIP,EAAgB,eCxFxDQ,MARf,WACE,OACE,qBAAKrB,UAAU,MAAf,SACE,cAAC,EAAD,OCMSsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d2abb87b.chunk.js","sourcesContent":["import './index.scss';\r\nimport {\r\n    useEffect,\r\n    useState\r\n} from 'react';\r\nimport $ from 'jquery';\r\nlet timeout;\r\n\r\nfunction ImageShow(){\r\n    const [trackCount, setTrackCount] = useState(3);\r\n    const [trackList, setTrackList] = useState([]);\r\n    const [prevVisible, setPrevVisible] = useState(false);\r\n    const [nextVisible, setNextVisible] = useState(false);\r\n    useEffect(()=>{\r\n        let arr = [];\r\n        for(let i = 0; i < trackCount; i++){\r\n            arr.push(\r\n                <div className={\"nana-track nana-track-\" + (i+1)}>\r\n\r\n                </div>\r\n            )\r\n        }\r\n        setTrackList(arr);\r\n    }, [trackCount]);\r\n    //控制切换图标的显示\r\n    useEffect(()=>{\r\n        if($(\".nana-track-container\").length > 0){\r\n            checkBtn(0);\r\n        }\r\n    }, [trackList]);\r\n    const checkBtn = (currentLeft) => {\r\n        let prevVisible = false, nextVisible = false;\r\n        let showWidth = parseInt($(\".nana-track-container\").width()) - 100;\r\n        let actureWidth = trackList.length * 300, count = 1;\r\n        count = trackList.length;\r\n        if(actureWidth > showWidth){\r\n            nextVisible = true;\r\n        } else {\r\n            nextVisible = false;\r\n        }\r\n        if(Math.abs(currentLeft) == (count-1)*showWidth){\r\n            nextVisible = false;\r\n        } else {\r\n            nextVisible = true;\r\n        }\r\n        if(currentLeft == 0){\r\n            prevVisible = false;\r\n        } else {\r\n            prevVisible = true;\r\n        }\r\n        // console.log(currentLeft, prevVisible, nextVisible);\r\n        setPrevVisible(prevVisible);\r\n        setNextVisible(nextVisible);\r\n    }\r\n    const changeAwardLeft = (type) => {\r\n        clearTimeout(timeout);\r\n        timeout = setTimeout(() => {\r\n            let node = $(\".move-container\");\r\n            let showWidth = 320;\r\n            let count = trackList.length;\r\n            // count = Math.ceil(actureWidth / showWidth);\r\n            let currentLeft = parseInt(node.css(\"left\"));\r\n            // console.log(currentLeft, actureWidth, showWidth, count)\r\n            if(type == \"prev\"){\r\n                if(currentLeft == 0){\r\n                    return;\r\n                }\r\n                node.css({\r\n                    left: currentLeft + showWidth\r\n                })\r\n                checkBtn(currentLeft + showWidth);\r\n            }\r\n            if(type == \"next\"){\r\n                if(Math.abs(currentLeft) == (count-1)*showWidth){\r\n                    return;\r\n                }\r\n                node.css({\r\n                    left: currentLeft - showWidth\r\n                })\r\n                checkBtn(currentLeft - showWidth);\r\n            }\r\n            \r\n        }, 200);\r\n    }\r\n    return (\r\n        <div className=\"image-show\">\r\n            <div className=\"nana-track-container\">\r\n                <div className=\"move-container\">\r\n                {trackList}\r\n                </div>\r\n            </div>\r\n            {\r\n                // prevVisible?\r\n                <div className=\"prev-btn\" onClick={()=>changeAwardLeft(\"prev\")}></div>\r\n                // :\r\n                // \"\"\r\n            }\r\n            {\r\n                // nextVisible?\r\n                <div className=\"next-btn\" onClick={()=>changeAwardLeft(\"next\")}></div>\r\n                // :\r\n                // \"\"\r\n            }\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default ImageShow;","import './App.scss';\nimport ImageShow from \"./component/imageShow\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ImageShow />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}